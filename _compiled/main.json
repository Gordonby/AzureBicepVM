{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "18105718325828066196"
    }
  },
  "parameters": {
    "resourceNameSeed": {
      "type": "string",
      "metadata": {
        "description": "Used to name the VM"
      }
    },
    "subnetId": {
      "type": "string",
      "metadata": {
        "description": "The full resourceId of the subnet you want to deploy the VM into"
      }
    },
    "os": {
      "type": "string",
      "defaultValue": "Windows2019",
      "allowedValues": [
        "Windows2019",
        "Ubuntu2004"
      ]
    },
    "role": {
      "type": "string",
      "defaultValue": "DevMachine",
      "allowedValues": [
        "DevMachine"
      ]
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "The local admin username"
      }
    },
    "adminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "The local admin password"
      }
    },
    "RBACRolesNeeded": {
      "type": "array",
      "defaultValue": [
        "acdd72a7-3385-48ef-bd42-f606fba81ae7",
        "0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8"
      ]
    },
    "doRBACAssignments": {
      "type": "bool",
      "defaultValue": true
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "enableAcceleratedNetworking": {
      "type": "bool",
      "defaultValue": true
    },
    "osDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS"
    },
    "osDiskDeleteOption": {
      "type": "string",
      "defaultValue": "Delete"
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3"
    },
    "nicDeleteOption": {
      "type": "string",
      "defaultValue": "Delete"
    },
    "patchMode": {
      "type": "string",
      "defaultValue": "AutomaticByOS"
    },
    "enableHotpatching": {
      "type": "bool",
      "defaultValue": false
    },
    "zone": {
      "type": "string",
      "defaultValue": "1"
    },
    "autoShutdownStatus": {
      "type": "string",
      "defaultValue": "Enabled"
    },
    "autoShutdownTime": {
      "type": "string",
      "defaultValue": "19:00"
    },
    "autoShutdownTimeZone": {
      "type": "string",
      "defaultValue": "UTC"
    }
  },
  "variables": {
    "isWindows": "[equals(substring(parameters('os'), 0, 7), 'Windows')]",
    "vnetRG": "[split(parameters('subnetId'), '/')[4]]",
    "vnetName": "[split(parameters('subnetId'), '/')[8]]",
    "subnetName": "[split(parameters('subnetId'), '/')[10]]",
    "vmName": "[format('vm-{0}', parameters('resourceNameSeed'))]",
    "nicName": "[format('nic-01-vm{0}', parameters('resourceNameSeed'))]",
    "vmComputerName": "[if(greater(length(parameters('resourceNameSeed')), 15), substring(parameters('resourceNameSeed'), 0, 15), parameters('resourceNameSeed'))]",
    "osmap": {
      "Windows2019": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter-smalldisk",
        "version": "latest"
      },
      "Ubuntu2004": {
        "publisher": "canonical",
        "offer": "0001-com-ubuntu-server-focal",
        "sku": "20_04-lts",
        "version": "latest"
      }
    },
    "windowsConfig": {
      "enableAutomaticUpdates": true,
      "provisionVMAgent": true,
      "patchSettings": {
        "enableHotpatching": "[parameters('enableHotpatching')]",
        "patchMode": "[parameters('patchMode')]"
      }
    },
    "linuxConfig": {
      "patchSettings": {
        "patchMode": "ImageDefault"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2021-03-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[parameters('subnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ],
        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-07-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('osDiskType')]"
            },
            "deleteOption": "[parameters('osDiskDeleteOption')]"
          },
          "imageReference": "[variables('osmap')[parameters('os')]]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
              "properties": {
                "deleteOption": "[parameters('nicDeleteOption')]"
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('vmComputerName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": "[if(variables('isWindows'), variables('windowsConfig'), json('null'))]",
          "linuxConfiguration": "[if(not(variables('isWindows')), variables('linuxConfig'), json('null'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true
          }
        }
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', variables('vmName'))))]": {}
        }
      },
      "zones": [
        "[parameters('zone')]"
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', variables('vmName')))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('id-{0}', variables('vmName'))]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[parameters('doRBACAssignments')]",
      "copy": {
        "name": "vmIdRBAC",
        "count": "[length(parameters('RBACRolesNeeded'))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "name": "[format('{0}', guid(resourceId('Microsoft.Compute/virtualMachines', variables('vmName')), parameters('RBACRolesNeeded')[copyIndex()]))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', variables('vmName')))).principalId]",
        "principalType": "ServicePrincipal",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RBACRolesNeeded')[copyIndex()])]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', variables('vmName')))]",
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ]
    },
    {
      "type": "Microsoft.DevTestLab/schedules",
      "apiVersion": "2018-09-15",
      "name": "[format('shutdown-computevm-{0}', variables('vmName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "status": "[parameters('autoShutdownStatus')]",
        "taskType": "ComputeVmShutdownTask",
        "dailyRecurrence": {
          "time": "[parameters('autoShutdownTime')]"
        },
        "timeZoneId": "[parameters('autoShutdownTimeZone')]",
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "notificationSettings": {
          "status": "Disabled"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ]
    },
    {
      "condition": "[and(variables('isWindows'), equals(parameters('role'), 'DevMachine'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}', variables('vmName'), 'WindowsDevTools')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.7",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://github.com/Gordonby/AzureBicepVM/blob/main/customscripts/windowsdevtools.ps1?raw=true"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File DevVMTools.ps1"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ]
    },
    {
      "condition": "[and(not(variables('isWindows')), equals(parameters('role'), 'DevMachine'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/{1}', variables('vmName'), 'LinuxDevTools')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {},
        "protectedSettings": {
          "fileUris": [
            "https://github.com/Gordonby/AzureBicepVM/blob/main/customscripts/linuxdevtools.sh?raw=true"
          ],
          "commandToExecute": "sh DevVMTools.sh"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
      ]
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    }
  }
}